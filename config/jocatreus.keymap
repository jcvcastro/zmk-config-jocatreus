/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define FNC 3

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q             &kp W     &kp E      &kp R      &kp T      &kp Y        &kp U      &kp I      &kp O    &lt 4 P                &lt 3 ENTER
  &kp A             &kp S     &kp D      &kp F      &kp G      &kp H        &kp J      &kp K      &kp L    &kp SEMI               &mt LEFT_GUI ESC
  &mt LEFT_SHIFT A  &kp X     &kp C      &kp V      &kp B      &kp N        &kp M      &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH  &lt 1 SPACE
  &mt LCTRL ESC     &kp CAPS  &kp SPACE  &kp SPACE  &kp SPACE  &lt 2 MINUS  &kp SPACE  &kp TILDE  &kp SQT  &mt RCTRL ENTER        &lt 4 NON_US_BACKSLASH
            >;
        };

        lower_layer {
            bindings = <
  &kp LS(EXCL)    &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp PRCNT       &kp CARET  &kp AMPS      &kp STAR   &kp BACKSPACE    &none
  &kp LS(LBRC)    &kp LS(RBRC)  &kp LS(LPAR)   &kp LS(RPAR)  &kp LS(AMPS)   &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp UNDER        &none
  &kp LEFT_SHIFT  &trans        &kp LBKT       &kp RBKT      &kp LS(STAR)   &kp HOME        &kp PG_DN  &kp PG_UP     &kp END    &kp RIGHT_SHIFT  &none
  &kp RBRC        &kp C_VOL_UP  &trans         &trans        &trans         &trans          &trans     &trans        &trans     &trans           &none
            >;
        };

        raise_layer {
            bindings = <
  &kp GRAVE  &none         &none  &none  &none  &kp FSLH   &kp N7  &kp N8  &kp N9   &kp BSPC      &kp ENTER
  &kp BSPC   &none         &none  &none  &none  &kp STAR   &kp N4  &kp N5  &kp N6   &kp MINUS     &kp EQUAL
  &none      &kp BSLH      &none  &none  &none  &kp EQUAL  &kp N1  &kp N2  &kp N3   &kp LS(PLUS)  &kp LBKT
  &kp RBKT   &kp C_VOL_UP  &none  &none  &none  &none      &none   &kp N0  &kp DOT  &kp COMMA     &none
            >;
        };

        function_layer {
            bindings = <
  &kp F1  &kp F2  &kp F3       &kp F4        &kp F5        &kp F6        &kp F7        &kp F8        &kp F9  &kp F10  &none
  &trans  &trans  &trans       &trans        &trans        &trans        &trans        &trans        &none   &none    &none
  &none   &trans  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans   &trans
  &trans  &trans  &bootloader  &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans        &trans        &trans  &trans   &trans
            >;
        };

        layer_4 {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none  &none  &none  &none  &none  &none
  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none  &none  &none  &none  &none  &none
  &none   &none   &none   &none   &none   &none  &none  &none  &none  &none  &none
  &none   &none   &none   &none   &none   &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
